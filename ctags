--exclude=build
--exclude=bin
--exclude=.git
--excmd=p
--langdef=vb
--langmap=vb:.bas.cls.ctl.frm.vbs
--regex-vb=/^[\t ]*(Public|Private|\b)*[\t ]*Sub[\t ]+([a-zA-Z0-9_]+)/\2/s,subroutine/i
--regex-vb=/^[\t ]*(Public|Private|\b)*[\t ]*Function[\t ]+([a-zA-Z0-9_]+)((.*))/\2/f,function/i
--regex-vb=/^[\t ]*(Public|Private|Global|\b)+[\t ]+([a-zA-Z0-9_]+)(\(*[0-9]*\)*)[\t ]+As[\t ]+[a-zA-Z.]+/\2/v,variable/i
--regex-vb=/^[\t ]*(Public|Private|Global|\b)*[\t ]*Const[\t ]+([a-zA-Z0-9_]+)[\t ]+(As|=)[\t ]+/\2/c,const/i
--regex-vb=/^[\t ]*(Public|Private|\b)*[\t ]*Type[\t ]+([a-zA-Z0-9_]+)/\2/t,type/i
--regex-vb=/^[\t ]*(Public|\b)[\t ]*Property[\t ]*(Get|Let|Set)[\t ]+([a-zA-Z0-9_]+)/\3/p,property/i
--regex-vb=/^[\t ]*(Public|Private|\b)[\t ]*Enum[\t ]+([a-zA-Z0-9_]+)/\2/e,enum/i

--langdef=vbnet
--langmap=vbnet:.vb
--regex-vbnet=/^[\t ]*(Public|Private|Friend|Protected|\b)*[\t ]*(Overloads[\t ]+)?(Shared[\t ]+)?Sub[\t ]+([a-zA-Z0-9_]+)/\4/s,subroutine/i
--regex-vbnet=/^[\t ]*(Public|Private|Friend|Protected|\b)*[\t ]*(Overloads[\t ]+)?(Shared[\t ]+)?Function[\t ]+([a-zA-Z0-9_]+)((.*))/\4/f,function/i
--regex-vbnet=/^[\t ]*(Public|Private|Friend|Protected|\b)*[\t ]*((ReadOnly|WriteOnly)[\t ]+)?Property[\t ]+([a-zA-Z0-9_]+)((.*))/\4/f,function/i
--regex-vbnet=/^[\t ]*(Public|Private|Friend|Protected|\b)[\t ]+([a-zA-Z0-9_]+)(\(*[0-9]*\)*)[\t ]+As[\t ]+[a-zA-Z.]+/\2/v,variable/i
--regex-vbnet=/^[\t ]*(Public|Private|Friend|Protected|\b)?[\t ]*Const[\t ]+([a-zA-Z0-9_]+)[\t ]+(As|=)[\t ]+/\2/c,const/i
--regex-vbnet=/^[\t ]*(Public|Private|Friend|Protected|\b)?[\t ]*Class[\t ]+([a-zA-Z0-9_]+)/\2/c,class/i
--regex-vbnet=/^[\t ]*(Public|Private|Friend|Protected|\b)?[\t ]*Module[\t ]+([a-zA-Z0-9_]+)/\2/m,module/i
--regex-vbnet=/^[\t ]*(Public|Private|Friend|Protected|\b)?[\t ]*Structure[\t ]+([a-zA-Z0-9_]+)/\2/t,type/i
--regex-vbnet=/^[\t ]*(Public|Private|Friend|Protected|\b)?[\t ]*Enum[\t ]+([a-zA-Z0-9_]+)/\2/e,enum/i

--langdef=Scala
--langmap=Scala:.scala
--regex-scala=/^[ \t]*((abstract|final|sealed|implicit|lazy)[ \t]*)*(private|protected)?[ \t]*class[ \t]+([a-zA-Z0-9_]+)/\4/c,classes/
--regex-scala=/^[ \t]*((abstract|final|sealed|implicit|lazy)[ \t]*)*(private|protected)?[ \t]*object[ \t]+([a-zA-Z0-9_]+)/\4/c,objects/
--regex-scala=/^[ \t]*((abstract|final|sealed|implicit|lazy)[ \t]*)*(private|protected)?[ \t]*case class[ \t]+([a-zA-Z0-9_]+)/\4/c,case classes/
--regex-scala=/^[ \t]*((abstract|final|sealed|implicit|lazy)[ \t]*)*(private|protected)?[ \t]*case object[ \t]+([a-zA-Z0-9_]+)/\4/c,case objects/
--regex-scala=/^[ \t]*((abstract|final|sealed|implicit|lazy)[ \t]*)*(private|protected)?[ \t]*trait[ \t]+([a-zA-Z0-9_]+)/\4/t,traits/
--regex-scala=/^[ \t]*type[ \t]+([a-zA-Z0-9_]+)/\1/T,types/
--regex-scala=/^[ \t]*((abstract|final|sealed|implicit|lazy)[ \t]*)*def[ \t]+([a-zA-Z0-9_]+)/\3/m,methods/
--regex-scala=/^[ \t]*((abstract|final|sealed|implicit|lazy)[ \t]*)*val[ \t]+([a-zA-Z0-9_]+)/\3/l,constants/
--regex-scala=/^[ \t]*((abstract|final|sealed|implicit|lazy)[ \t]*)*var[ \t]+([a-zA-Z0-9_]+)/\3/l,variables/
--regex-scala=/^[ \t]*package[ \t]+([a-zA-Z0-9_.]+)/\1/p,packages/

--regex-ruby=/(^|;)[ \t]*(has_many|belongs_to|has_one|has_and_belongs_to_many)\(? *:([[:alnum:]_]+)/\3/f,association,Active Record association/
--regex-ruby=/(^|;)[ \t]*(named_)?scope\(? *:([[:alnum:]_]+)/\3/f,scope,ActiveRecord scope/
