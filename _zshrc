# users generic .zshrc file for zsh(1)

autoload -Uz is-at-least

if is-at-least 4.3.10; then
  autoload -Uz add-zsh-hook
fi

## ignore case for completion
zstyle ':completion:*' matcher-list 'm:{a-z}={A-Z}'
zstyle ':completion:*:default' menu select=2

zstyle ':completion:*:sudo:*' command-path /usr/local/sbin /usr/local/bin \
            /usr/sbin /usr/bin /sbin /bin /usr/X11R6/bin

zstyle ':completion:*' accept-exact '*(N)'
zstyle ':completion:*' use-cache yes
zstyle ':completion:*' verbose yes
zstyle ':completion:*' cache-path ~/.zsh/cache

WORDCHARS='*?_-.[]~=&;!#$%^(){}<>'
WORDCHARS=${WORDCHARS:s,/,,}

# stty erase '^H'
stty intr '^C'
stty susp '^Z'

# set terminal title including current directory # {{{
#
case "${TERM}" in
kterm*|xterm*)
  export LSCOLORS=exfxcxdxbxegedabagacad
  export LS_COLORS='di=34:ln=35:so=32:pi=33:ex=31:bd=46;34:cd=43;34:su=41;30:sg=46;30:tw=42;30:ow=43;30'
  zstyle ':completion:*' list-colors \
    'di=34' 'ln=35' 'so=32' 'ex=31' 'bd=46;34' 'cd=43;34'
  ;;
esac # }}}

## Default shell configuration
#
# set prompt
#
# settings for vcs prompt # {{{

autoload -Uz vcs_info

zstyle ':vcs_info:*' max-exports 3

zstyle ':vcs_info:*' enable git svn hg
zstyle ':vcs_info:*' formats "[%s:%b]%m"
zstyle ':vcs_info:*' check-for-changes true
zstyle ':vcs_info:*' actionformats '[%s:%b|%a]%u%c'
zstyle ':vcs_info:svn:*' branchformat '%b:r%r'

if is-at-least 4.3.10; then
  zstyle ':vcs_info:git:*' check-for-changes true
  zstyle ':vcs_info:git:*' stagedstr "+"
  zstyle ':vcs_info:git:*' unstagedstr "*"
fi

psv1=''
psv2=''
if is-at-least 4.3.11; then
# https://github.com/mollifier/config/blob/master/dot.zshrc
  zstyle ':vcs_info:git+set-message:*' hooks \
                                        git-hook-begin \
                                        git-unstaged \
                                        git-nopushed \
                                        git-untracked \
                                        git-stash-count

  function +vi-git-hook-begin() {
    if [[ "$(command git rev-parse --is-inside-work-tree 2> /dev/null)" != "true" ]]; then
      return 1
    fi
    return 0
  }

  function +vi-git-untracked() {
    local git_status

    # cwd is a Git's working copy or not
    git_status=$(command git status --porcelain 2> /dev/null)
    # untracked files
    if ! echo "$git_status" | grep "^??" > /dev/null 2>&1; then
      return 0
    fi
    # hook_com[unstaged]+='?'
    psv2+='?'
  }

  function +vi-git-unstaged() {
    local git_status

    # cwd is a Git's working copy or not
    git_status=$(git status --porcelain | sed 's/^ *//' 2> /dev/null)

    # find out staged file
    if echo "$git_status" | grep "^A" > /dev/null 2>&1; then
      # hook_com[misc]+="+"
      psv2+="+"
    elif echo "$git_status" | grep "^M" > /dev/null 2>&1; then
      psv2+="*"
    else
      return 0
    fi
  }

  function +vi-git-nopushed() {
    local head remotes

    # HEAD's hash value
    head=$(git rev-parse --verify -q HEAD 2> /dev/null)
    if [ $? -eq 0 ]; then
      # get remote's hash value as an array
      remotes=($(git rev-parse --remotes 2> /dev/null))
      if [ "$remotes[*]" ]; then
        for x in ${remotes[@]}; do
          # compare hash value HEAD and remote
          if [ "$head" = "$x" ]; then
            # already pushed
            return 0
          fi
        done
      else
        # no remote
        return 0
      fi
    else
      # HEAD doesn't exist
      return 0
    fi

    # hook_com[misc]+="@"
    psv2+="@"
  }

  function +vi-git-stash-count() {
    local count=0
    count=$(command git stash list 2>&1 | wc -l | tr -d ' ')

    if [ $count -eq 0 ]; then
      return 0
    fi
    # hook_com[misc]+="(${count})"
    psv2+="(${count})"
  }
fi

# http://d.hatena.ne.jp/yonchu/20120506/1336335973
function _vcs_info() {
  psvar=()
  psv1=''
  psv2=''
  LANG=en_US.UTF-8 vcs_info
  if [ -z "$vcs_info_msg_0_" ]; then
    psvar[1]=''
  else
    psvar[1]=${vcs_info_msg_0_}
    psvar[2]=${psv2}
  fi
}

if [ -n $SSH_CONNECTION ]; then
  add-zsh-hook precmd _vcs_info
fi
# }}}

autoload colors
colors
case ${UID} in
0)
  PROMPT="%B%{${fg[red]}%}%/#%{${reset_color}%}%b "
  PROMPT2="%B%{${fg[red]}%}%_#%{${reset_color}%}%b "
  SPROMPT="%B%{${fg[red]}%}%r is correct? [n,y,a,e]:%{${reset_color}%}%b "
  [ -n "${REMOTEHOST}${SSH_CONNECTION}" ] &&
    PROMPT="%{${fg[cyan]}%}%n%{${reset_color}%}@%{${fg[yellow]}%}%m%{${reset_color}%}:${PROMPT}"

  [ -n "${SSH_CONNECTION}" ] &&
      RPROMPT="%{${fg[blue]}%}%3v%{${reset_color}%}"
  ;;
*)
  PROMPT="%{${fg[red]}%}%/%{${reset_color}%}%{$fg[green]%}%1v%{$reset_color%}%{$fg[yellow]%}%2v%{$reset_color%}
%% "
  PROMPT2="%{${fg[red]}%}%_%{${reset_color}%}%% "
  SPROMPT="%{${fg[red]}%}%r is correct? [n,y,a,e]:%{${reset_color}%}"

  # RPROMPT="%{${fg[red]}%}%3v%{${reset_color}%}"
  [ -n "${SSH_CONNECTION}" ] &&
      RPROMPT="%{${fg[blue]}%}%3v%{${reset_color}%}"

  [ -n "${REMOTEHOST}${SSH_CONNECTION}" ] &&
      PROMPT="%{${fg[magenta]}%}%n%{${reset_color}%}@%{${fg[yellow]}%}%m%{${reset_color}%}:${PROMPT}"
  ;;
esac

setopt promptsubst

# completion as path after =
setopt magic_equal_subst

# auto change directory
setopt auto_cd

# auto directory pushd that you can get dirs list by cd -[tab]
setopt auto_pushd
# don't push same directory
setopt pushd_ignore_dups

# command correct edition before each completion attempt
setopt correct

# compacked complete list display
setopt list_packed

# no remove postfix slash of command line
setopt noautoremoveslash

# no beep sound when complete list displayed
setopt nolistbeep

# for dir completion. added '/'
setopt auto_param_slash
# add '/'
setopt mark_dirs

setopt complete_in_word
setopt glob_complete
setopt hist_expand

unset menu_complete
setopt auto_list
setopt auto_menu

zmodload zsh/complist
bindkey -M menuselect 'h' vi-backward-char
bindkey -M menuselect 'j' vi-down-line-or-history
bindkey -M menuselect 'k' vi-up-line-or-history
bindkey -M menuselect 'l' vi-forward-char

## Keybind configuration
#
# emacs like keybind (e.x. Ctrl-a goes to head of a line and Ctrl-e goes
# to end of it)
if [ -n $SSH_CLIENT ]; then
  bindkey -v
else
  bindkey -e
fi

# historical backward/forward search with linehead string binded to ^P/^N
autoload history-search-end
zle -N history-beginning-search-backward-end history-search-end
zle -N history-beginning-search-forward-end history-search-end
bindkey "^p" history-beginning-search-backward-end
bindkey "^n" history-beginning-search-forward-end
bindkey "\\ep" history-beginning-search-backward-end
bindkey "\\en" history-beginning-search-forward-end
bindkey "^r" history-incremental-search-backward

# available multibyte characters
setopt print_eight_bit
setopt no_flow_control

## Command history configuration
HISTSIZE=20000
SAVEHIST=100000

# if [ $UID = 0 ]; then
#   unset HISTFILE
#   SAVEHIST=0
# fi

setopt hist_ignore_space # not save history, starts from space
setopt hist_ignore_all_dups
setopt hist_ignore_dups
setopt hist_save_nodups # remove duplicated history when save history
setopt hist_no_store # `history` command won't be saved to $HISTFILE
setopt share_history # share command history data
setopt hist_reduce_blanks # trim space when save history
setopt interactive_comments # comment after '#'

## Alias configuration# {{{
# expand aliases before completing
setopt complete_aliases # aliased ls needs if file/dir completions work
# _expand_alias:
zstyle ':completion:*:expand-alias:*' global true
bindkey '^y' _expand_alias

case "${OSTYPE}" in
  freebsd*|darwin*)
    alias vim="$EDITOR "$@""
    alias gvim="$EDITOR -g "$@""
    alias ls='gls -F --color'
    ;;
  *)
    alias ls='ls -F --color'
    ;;
esac

alias where='command -v'
alias j='jobs -l'

alias sl='ls'

alias la='ls -a'
alias ll='ls -l'
alias lla='ls -la'
alias ltr='ls -ltr'
alias llh='ls -lh'

alias fgrep='fgrep -nHr'

alias du='du -h'
alias df='df -h'
alias su='su -l'
alias lv='lv -c'

alias v='vim'
alias vi='vim'
alias vv='gvim'

alias g='git'
alias b='brew'
alias buo='brew update && brew outdated'

# Ruby
alias re='rbenv'

alias pyhttpd='python -m SimpleHTTPServer'

# global
alias -g K9='|xargs kill -9'

alias -g L='|$PAGER'
alias -g G='|grep'
alias -g W='|wc -l'
alias -g EEE='--secret-file ~/.chef/encrypted_data_bag_secret'

setopt complete_aliases


# }}}

## terminal configurations # {{{
#
unset LSCOLORS
case "${TERM}" in
xterm)
  export TERM=xterm-color
  ;;
kterm)
  export TERM=kterm-color
  # set BackSpace control character
  stty erase
  ;;
cons25)
  unset LANG
  export LSCOLORS=ExFxCxdxBxegedabagacad
  export LS_COLORS='di=01;34:ln=01;35:so=01;32:ex=01;31:bd=46;34:cd=43;34:su=41;30:sg=46;30:tw=42;30:ow=43;30'
  zstyle ':completion:*' list-colors \
    'di=;34;1' 'ln=;35;1' 'so=;32;1' 'ex=31;1' 'bd=46;34' 'cd=43;34'
  ;;
esac # }}}

# functions # {{{
# goto parent directory
function cdup() {
  echo
  cd ..
  zle reset-prompt
}
zle -N cdup
bindkey '^\^' cdup
# }}}

## Completion configuration
autoload -Uz compinit
compinit

## tmux
if [ $UID != 0 ]; then
  if [ -z $SSH_CLIENT ]; then
    if [[ -x `which tmux` && $SHLVL = 1 ]]; then
      tmux attach || tmux new-session -s default
    fi
  fi
fi

# __END__
# vim: et ts=2 sts=2 sw=2

